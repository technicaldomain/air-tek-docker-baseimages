name: Release
on:
  push:
    branches:
      - main
      - master

jobs:
  release:
    name: Make GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Release
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      new_release_published: ${{ steps.semantic-release.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic-release.outputs.new_release_version }}

  list-images:
    name: Get Images matrix
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new_release_published == 'true'
    outputs:
      images: ${{ steps.set-matrix.outputs.images }}
    steps:
      - uses: actions/checkout@v3
      - id: set-matrix
        name: get list of base images
        run: echo "images=$(ls ./*/Dockerfile | jq -R -s -c 'split("\n")[:-1] | map(split("/")[-2])')" >> $GITHUB_OUTPUT

  build-and-push-images:
    name: Build base Docker Images
    runs-on: ubuntu-latest
    needs: [release, list-images]
    permissions:
      id-token: 'write'
    if: needs.release.outputs.new_release_published == 'true'
    strategy:
      matrix:
        image: ${{ fromJson(needs.list-images.outputs.images) }}
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: ${{ matrix.image }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ needs.release.outputs.new_release_version }}
          ECR_REPOSITORY: ${{ github.event.repository.name}}/${{ matrix.image }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
